---
# tasks file for openstack-resource-shared-filesystem
- name: Create cephfs type 
  shell: "/home/openstack-cli-env/bin/openstack share type create cephfs false --os-cloud cloud1 --extra-specs vendor_name=Ceph   storage_protocol=CEPHFS  share_backend_name=CEPHFS1"
  ignore_errors: true
   
- name: Check cephfs share exists
  shell: "/home/openstack-cli-env/bin/openstack share list --os-cloud cloud1 -f value -c Name |grep -i '^cephfs1$'"
  register: check_share
  ignore_errors: true

- name: Create cephfs shared filesystem
  shell: "/home/openstack-cli-env/bin/openstack share create --os-cloud cloud1 --share-type cephfs --name cephfs1 cephfs 1" 
  when:
   - check_share.rc != 0

- name: Create shared filesystem access 
  shell: "/home/openstack-cli-env/bin/openstack share access create --os-cloud cloud1 cephfs1 cephx training" 
  when:
   - check_share.rc != 0

- name: Get cephfs access keyring 
  shell: "/home/openstack-cli-env/bin/openstack share access list --os-cloud cloud1 cephfs1 -f value -c access_key" 
  register: access_keyring
  ignore_errors: true

- name: Get cephfs access path
  shell: "/home/openstack-cli-env/bin/openstack share show cephfs1  --os-cloud cloud1 -c export_locations  -f yaml |grep -i path |awk -F'= ' '{print $2}'"
  register: access_path
  ignore_errors: true

- name: Include globals.yml
  include_vars:  "{{ playbook_dir }}/../kolla-ansible-config/{{ groups['deploy'][0] }}/etc/kolla/globals.yml"

- name: Set fact storage network 
  set_fact:
    stg_net: "{{ vars['ansible_' + storage_interface].ipv4 }}"
  delegate_to: "{{ groups['con'][0] }}"

- name: Set storage network split
  debug: 
    msg: "{{ stg_net.network.split('.') }}"
  register: storage_network_split

- name: Check storage network exists
  shell: "/home/openstack-cli-env/bin/openstack network list -f value -c Name --os-cloud cloud1 |grep -i '^storage1$'"
  register: check_stg_net
  ignore_errors: true

- name: Create storage network 
  shell: "/home/openstack-cli-env/bin/openstack network create --provider-network-type vlan --provider-physical-network physnet2 --provider-segment 103 --availability-zone-hint storage-net-az --share --internal --no-default storage1  --os-cloud cloud1 "
  when:
   - check_stg_net.rc != 0

- set_fact:
    stg_cidr_mask: "{{ ip | ipaddr('prefix') }}"
  vars:
    ip: "{{ stg_net.network }}/{{ stg_net.netmask }}"

- name: Create storage network subnet
  os_subnet:
    cloud: cloud1
    name: storage1_sub
    network_name: storage1
    no_gateway_ip: yes
    cidr: "{{ stg_net.network }}/{{ stg_cidr_mask }}"
    enable_dhcp: yes
    allocation_pool_start: "{{ storage_network_split.msg[0] }}.{{ storage_network_split.msg[1] }}.{{ storage_network_split.msg[2] }}.150"
    allocation_pool_end: "{{ storage_network_split.msg[0] }}.{{ storage_network_split.msg[1] }}.{{ storage_network_split.msg[2] }}.200"
  when:
   - check_stg_net.rc != 0

- name: Get instance info
  shell: "/home/openstack-cli-env/bin/openstack server show training-instance1  -f yaml -c addresses --os-cloud cloud1 "
  register: instance_result

- name: Check if instance has storage network 
  shell: "/home/openstack-cli-env/bin/openstack server show training-instance1  -f value -c addresses --os-cloud cloud1 |grep -i storage1"
  register: check_instance_stg_net
  ignore_errors: true

- name: Add network to instance 
  shell: "/home/openstack-cli-env/bin/openstack server add network training-instance1 storage1 --os-cloud cloud1 "
  when:
   - check_instance_stg_net.rc != 0

- name: Add host inventory 
  add_host:
    hostname: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"
    ansible_ssh_user: ubuntu
    ansible_ssh_private_key_file: ~/.ssh/id_rsa_training
    ansible_python_interpreter: "/usr/bin/python3"
    ansible_become: yes

- name: Get instance last nic
  shell: "ip l  |grep ^[0-9] |awk -F':' '{print $2}'  |tail -n 1 "
  delegate_to: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"
  ignore_errors: true
  register: instance_lastnic

- name: Activate storage network on instance
  template: 
     src: 60-storage.yaml.j2
     dest:  /etc/netplan/60-storage.yaml
  delegate_to: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"

- name: Activate storage network on instance
  shell: "netplan apply"
  delegate_to: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"

- name: Create cephfs mount point
  file: 
    path: /mnt/ceph-kernel-driver
    state: directory 
  delegate_to: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"
    
- name: Add cephfs mount configuration to fstab file
  lineinfile: 
    line: "{{ access_path.stdout }} /mnt/ceph-kernel-driver  ceph  name=training,secret={{ access_keyring.stdout }},defaults,_netdev  0 0"
    path: /etc/fstab
    state: present 
  delegate_to: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"

- name: Mount cephfs shared filesystem
  shell: "mount /mnt/ceph-kernel-driver"
  delegate_to: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"

- name: Get mount status 
  shell: "df -h  /mnt/ceph-kernel-driver"
  delegate_to: "{{ instance_result.stdout_lines[3] | replace('-','')| replace('\ ','')}}"
  register: df_h

- name: Print mount status 
  debug: 
    msg: "{{ df_h.stdout }}"
